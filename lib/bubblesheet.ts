// Bubble sheet template generator with PDF support
import jsPDF from "jspdf";

// Template configurations
export const templateConfigs = {
  5: {
    name: "5 Questions",
    columns: 1,
    questionsPerColumn: 5,
    description: "Quick quiz",
  },
  10: {
    name: "10 Questions",
    columns: 1,
    questionsPerColumn: 10,
    description: "Short quiz",
  },
  15: {
    name: "15 Questions",
    columns: 1,
    questionsPerColumn: 15,
    description: "Mini test",
  },
  20: {
    name: "20 Questions",
    columns: 2,
    questionsPerColumn: 10,
    description: "Standard quiz",
  },
  25: {
    name: "25 Questions",
    columns: 2,
    questionsPerColumn: 13,
    description: "Short test",
  },
  50: {
    name: "50 Questions",
    columns: 2,
    questionsPerColumn: 25,
    description: "Standard test",
  },
  100: {
    name: "100 Questions",
    columns: 3,
    questionsPerColumn: 34,
    description: "Extended test",
  },
};

export const generateBubbleSheetPDF = (questions: number): jsPDF => {
  const doc = new jsPDF();
  const config = templateConfigs[questions as keyof typeof templateConfigs];

  // Page dimensions
  const pageWidth = doc.internal.pageSize.getWidth();
  const pageHeight = doc.internal.pageSize.getHeight();

  // Layout constants
  const margin = 20;
  const bubbleRadius = 3;
  const bubbleSpacing = 15;
  const questionSpacing = 18; // Reduced spacing for better fit
  const columnWidth =
    (pageWidth - 2 * margin - (config.columns - 1) * 15) / config.columns; // Reduced column spacing

  // Alignment markers (corner circles)
  const markerRadius = 4;
  doc.setFillColor(0, 0, 0);
  doc.circle(15, 15, markerRadius, "F");
  doc.circle(pageWidth - 15, 15, markerRadius, "F");
  doc.circle(15, pageHeight - 15, markerRadius, "F");
  doc.circle(pageWidth - 15, pageHeight - 15, markerRadius, "F");

  // Header
  doc.setFontSize(16);
  doc.setFont("helvetica", "bold");
  doc.text("SnapGrade Bubble Sheet", pageWidth / 2, 30, { align: "center" });

  doc.setFontSize(12);
  doc.setFont("helvetica", "normal");
  doc.text(`${questions} Questions`, pageWidth / 2, 40, { align: "center" });

  // Instructions
  doc.setFontSize(8);
  doc.text(
    "Fill bubbles completely with a #2 pencil. Make no stray marks.",
    pageWidth / 2,
    50,
    { align: "center" }
  );

  // Student information section
  doc.setLineWidth(0.5);
  doc.rect(margin, 55, pageWidth - 2 * margin, 20);
  doc.setFontSize(10);
  doc.text("Name: ________________________________", margin + 5, 67);
  doc.text("Date: _______________", margin + 5, 72);
  doc.text("Student ID: __________________", pageWidth - margin - 100, 67);

  // Answer choices header
  const startY = 90;
  doc.setFontSize(8);
  doc.setFont("helvetica", "bold");

  for (let col = 0; col < config.columns; col++) {
    const startX = margin + col * (columnWidth + 15); // Match the spacing used in question generation
    // Column headers for answer choices
    ["A", "B", "C", "D"].forEach((letter, index) => {
      const x = startX + 25 + index * bubbleSpacing;
      doc.text(letter, x, startY - 5, { align: "center" });
    });
  }

  // Generate questions
  doc.setFont("helvetica", "normal");
  for (let q = 1; q <= questions; q++) {
    const column = Math.floor((q - 1) / config.questionsPerColumn);
    const rowInColumn = (q - 1) % config.questionsPerColumn;

    // Skip if we would exceed the number of columns
    if (column >= config.columns) continue;

    const startX = margin + column * (columnWidth + 15); // Reduced spacing between columns
    const y = startY + rowInColumn * questionSpacing;

    // Skip if we exceed page bounds
    if (y > pageHeight - 30) continue;

    // Question number
    doc.setFontSize(9);
    doc.text(`${q}.`, startX + 15, y + 2, { align: "right" });

    // Answer bubbles A, B, C, D
    doc.setLineWidth(0.3);
    ["A", "B", "C", "D"].forEach((letter, index) => {
      const x = startX + 25 + index * bubbleSpacing;
      doc.circle(x, y, bubbleRadius);
    });
  }

  // Footer with scanning instructions
  doc.setFontSize(7);
  doc.setTextColor(100, 100, 100);
  doc.text(
    "Generated by SnapGrade â€¢ Ensure good lighting and clear marks for accurate scanning",
    pageWidth / 2,
    pageHeight - 10,
    { align: "center" }
  );

  return doc;
};

export const downloadBubbleSheetPDF = (questions: number) => {
  try {
    const doc = generateBubbleSheetPDF(questions);
    doc.save(`snapgrade-bubble-sheet-${questions}q.pdf`);
  } catch (error) {
    console.error("Error generating PDF:", error);
    // Fallback to SVG if PDF fails
    downloadBubbleSheetSVG(questions);
  }
};

// Keep SVG as fallback
export const generateBubbleSheetSVG = (questions: number): string => {
  const config = templateConfigs[questions as keyof typeof templateConfigs];
  const questionsPerColumn = config.questionsPerColumn;
  const bubbleSize = 12;
  const bubbleSpacing = 20;
  const columnSpacing = 200;
  const startX = 50;
  const startY = 100;

  let svg = `
<svg width="612" height="792" xmlns="http://www.w3.org/2000/svg">
  <!-- Header -->
  <text x="306" y="30" text-anchor="middle" font-family="Arial, sans-serif" font-size="20" font-weight="bold">
    SnapGrade Bubble Sheet - ${questions} Questions
  </text>
  
  <!-- Instructions -->
  <text x="306" y="50" text-anchor="middle" font-family="Arial, sans-serif" font-size="10" fill="#666">
    Fill bubbles completely with a #2 pencil. Make no stray marks.
  </text>
  
  <!-- Student Info Section -->
  <rect x="50" y="65" width="512" height="25" fill="none" stroke="#000" stroke-width="1"/>
  <text x="55" y="80" font-family="Arial, sans-serif" font-size="12">
    Name: ________________________  ID: ________________  Date: ___________
  </text>
  
  <!-- Alignment markers -->
  <circle cx="25" cy="25" r="8" fill="#000"/>
  <circle cx="587" cy="25" r="8" fill="#000"/>
  <circle cx="25" cy="767" r="8" fill="#000"/>
  <circle cx="587" cy="767" r="8" fill="#000"/>
`;

  // Generate questions
  for (let q = 1; q <= questions; q++) {
    const column = Math.floor((q - 1) / questionsPerColumn);
    const rowInColumn = (q - 1) % questionsPerColumn;

    const x = startX + column * columnSpacing;
    const y = startY + rowInColumn * (bubbleSpacing + 5);

    // Question number
    svg += `<text x="${x - 20}" y="${
      y + 5
    }" font-family="Arial, sans-serif" font-size="10" text-anchor="end">${q}.</text>`;

    // Answer bubbles A, B, C, D
    ["A", "B", "C", "D"].forEach((letter, index) => {
      const bubbleX = x + index * bubbleSpacing;
      svg += `
        <circle cx="${bubbleX}" cy="${y}" r="${
        bubbleSize / 2
      }" fill="none" stroke="#000" stroke-width="1"/>
        <text x="${bubbleX}" y="${
        y - 15
      }" text-anchor="middle" font-family="Arial, sans-serif" font-size="8">${letter}</text>
      `;
    });
  }

  svg += "</svg>";
  return svg;
};

export const downloadBubbleSheetSVG = (questions: number) => {
  const svg = generateBubbleSheetSVG(questions);
  const blob = new Blob([svg], { type: "image/svg+xml" });
  const url = URL.createObjectURL(blob);
  const a = document.createElement("a");
  a.href = url;
  a.download = `bubble-sheet-${questions}-questions.svg`;
  a.click();
  URL.revokeObjectURL(url);
};

// Demo mode utilities
export const getDemoMode = (): boolean => {
  if (typeof window === "undefined") return true;
  const demoMode = localStorage.getItem("snapgrade_demo_mode");
  return demoMode === null ? true : demoMode === "true";
};

export const setDemoMode = (enabled: boolean): void => {
  if (typeof window === "undefined") return;
  localStorage.setItem("snapgrade_demo_mode", enabled.toString());
};
